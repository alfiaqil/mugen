# Several changes made to Ikemen GO's tag code, mostly so that it works like a more elaborate "active switch" system
# See the readme for more details

# Original code by K4thos
# Modified by Phantom.of.the.Server

#===============================================================================
# Functions
#===============================================================================

# Returns character ID's that can tag in next
[Function fTagPartnerRange(partnerID) ret]
if $partnerID > getPlayerID(teamSide) + numPartner {
	let partnerID = getPlayerID(teamSide);
} else if $partnerID < getPlayerID(teamSide) {
	let partnerID = getPlayerID(teamSide) + numPartner;
}
let ret = $partnerID;

[Function fTagGetPartnerID(add) ret]
let partnerID = call fTagPartnerRange(ID + $add);
if (playerID($partnerID), alive = 0) || (playerID($partnerID), map(_potstag_cooldown) > 0) {
	let partnerCnt = 1;
	if $partnerCnt = min(numPartner, 3) {
		let partnerID = 0;
	} else {
		let partnerID = call fTagPartnerRange($partnerID + $add);
		if (playerID($partnerID), alive = 0) || (playerID($partnerID), map(_potstag_cooldown) > 0) {
			let partnerCnt = $partnerCnt + 1;
			if $partnerCnt = min(numPartner, 3) {
				let partnerID = 0;
			} else {
				let partnerID = call fTagPartnerRange($partnerID + $add);
				if (playerID($partnerID), alive = 0) || (playerID($partnerID), map(_potstag_cooldown) > 0) {
					let partnerID = 0;
				}
			}
		}
	}
}
# If gauge is full, go back and check characters that are cooling down
if $partnerID = 0 && map(_potstag_canbusyswitch) {
	let partnerID = call fTagPartnerRange(ID + $add);
	if (playerID($partnerID), alive = 0) {
		let partnerCnt = 1;
		if $partnerCnt = min(numPartner, 3) {
			let partnerID = 0;
		} else {
			let partnerID = call fTagPartnerRange($partnerID + $add);
			if playerID($partnerID), alive = 0 {
				let partnerCnt = $partnerCnt + 1;
				if $partnerCnt = min(numPartner, 3) {
					let partnerID = 0;
				} else {
					let partnerID = call fTagPartnerRange($partnerID + $add);
					if playerID($partnerID), alive = 0 {
						let partnerID = 0;
					}
				}
			}
		}
	}
}
let ret = $partnerID;


# tagIn Switch explod
[Function fTagSwitchExplod()]
let anim = const(FxTagSwitchAI);
if aiLevel = 0 {
	if gameMode = "versuscoop" {
		let anim = $anim + playerNo;
	} else if gameMode = "netplaysurvivalcoop" || gameMode = "netplayteamcoop" || gameMode = "survivalcoop" || gameMode = "teamcoop" {
		if teamSide = 1 {
			let anim = $anim + playerNo / 2 + 1;
		} else {
			let anim = $anim + playerNo / 2;
		}
	} else {
		let anim = $anim + teamSide;
	}
}
explod{
	anim: F $anim;
	posType: p1;
	pos: 0, floor((const(size.head.pos.y) - const(size.ground.front) / 2 - const(size.ground.back) / 2));
	sprPriority: 5;
	ownPal: 1;
	facing: facing;
	scale: 0.5, 0.5;
	bindTime: -1;
	superMoveTime: -1;
	pauseMoveTime: -1;
	removeOnGetHit: 0;
	ignoreHitPause: 1;
}


#===============================================================================
# StateTagEnteringScreen
#===============================================================================

[StateDef 56565600; 
	type: S; moveType: I; physics: N;
	anim: const(AnimTagEnteringScreen);
	sprPriority: 1; ctrl: 0;
]

posset{y: 0}

if pos x != [const240p(-80), const240p(80)] {screenBound{value: 0; moveCamera: 0, 1}}

mapset{map: "_iksys_tagSwitchCooldown"; value: const(TagSwitchCooldown)} # For compatibility. Not actually used

# Set movement
velSet{x: const240p(0.80 * const(TagInVelX)); y: 0}

if time = 0 {
	if facing != map(_potstag_facing) {turn{}}
	# set starting pos
	posSet{x: const240p(pos x * localScale - (backEdgeDist * localScale + 80) * facing); y: 0}
	# Store distance to switch initiation position. Not used but may be useful later
	mapset{map: "_iksys_tagSwitchDist"; value: abs(pos x - playerID(getPlayerID(teamLeader)), pos x)}
	# Store ID as last player active
	mapset{map: "_iksys_tagLastId"; value: playerID(getPlayerID(teamLeader)), ID}
	# Change active player assignment
	tagIn{leader: playerNo}
	call fTagSwitchExplod();
	palfx{time:10; add: 128, 128, 128; sinadd: -128, -128, -128, 4} # For visibility
	superpause{time: 0; anim: -1; darken: 0; p2defmul: 2.0} # Damage scaling
} else {
	mapadd{map: "_iksys_tagSwitchDist"; value: -vel x}
}

# Invulnerable before being visible
if backEdgeDist < -vel x {
	notHitBy{value: SCA; time: 1}
	statetypeset{statetype: A} # Compatibility fix for legacy tag codes
} else {
	statetypeset{statetype: S}
}

# Even more invulnerable during Counter Tag
if map(_potstag_invulnerable) {notHitBy{value: SCA; time: 6}}

# Can't cancel run with forward walk
if command != "holdback" && command != "holdup" {assertSpecial{flag: noHardcodedKeys}}

# Runs up to the enemy unless cancelled
# Can't block in the first frame
if backEdgeDist >= 0 {
	if AIlevel > 0 && !inguarddist {ctrlset{value: 0}} else {ctrlset{value: 1}} # Make the AI tag in close to the opponent
	if time >= 45 || p2BodyDist X < const240p(24) || frontedgedist < const240p(24) {
		velSet{x: 0; y: 0}
		changeState{value: const(StateStand); ctrl: 1}
	}
}


#===============================================================================
# StateTagLeavingScreen
#===============================================================================

[StateDef 56565610;
	type: S; moveType: I; physics: N;
	sprPriority: -2;
	velSet: 0, 0;
	ctrl: 0;
]

posset{y: 0}

if pos x != [const240p(-80), const240p(80)] || time > 60 {screenBound{value: 0; moveCamera: 0, 1}}

if time = 0 {
	if facing != map(_potstag_facing) {turn{}}
	afterimagetime{time: 0}
}

if map(_potstag_leavingdelay) = 0 {
	if time < 6 {
		changeanim{value: const(AnimJumpStart_onGround)}
	}
	if time = 6 {
		turn{}
		changeanim{value: const(AnimTagLeavingScreen)}
	}
}

if map(_potstag_leavingdelay) = 1 {
	if time = 0 {
		if anim != const(AnimStanding) {changeanim{value: const(AnimStanding)}}
	}
	if time = 20 {
		turn{}
		changeanim{value: const(AnimStandTurning)}
	}
	if anim != const(AnimTagLeavingScreen) && (!animtime || time = 30) {
		changeanim{value: const(AnimTagLeavingScreen)}
	}
}

if anim != const(AnimStanding) {
	tagOut{}
	playerPush{value: 0}
	notHitBy{value: SCA; time: 2}
	palfx{time:1; mul: 192, 192, 192}
}

if anim = const(AnimTagLeavingScreen) || anim = 100 || time >= 30 {
	velSet{x: 0.60 * const240p(const(TagInVelX)); y: 0}
}

if anim = const(AnimStanding) && roundstate != 2 {changestate{value: 0; ctrl: 1}} # Just in case

if backEdgeDist < 0 || frontEdgeDist < 0 {stateTypeSet{statetype: A}} # Compatibility fix for legacy tag codes

if backEdgeDist < const240p(-80) || frontEdgeDist < const240p(-80) {
	changeState{value: 56565611}
}


#===============================================================================
# StateTagWaitingOutside
#===============================================================================

[StateDef 56565611;
	type: A; moveType: I; physics: N; # Air type for compatibility with legacy tag codes
	anim: const(AnimAirRecover); # Prevents some characters from playing standing anim sounds/effects
	velSet: 0, 0;
	ctrl: 0;
]

tagOut{}
notHitBy{value: SCA; time: 2}
screenBound{value: 0; moveCamera: 0, 0}
assertSpecial{flag: invisible; flag2: noAutoTurn; flag3: noturntarget}
mapset{map: "_potstag_leavingdelay"; value: 0}

# Drop target when safe to do so
# May reset juggle checking and combo limits in some characters
if numtarget {
	if target, incustomstate = 0
	|| (target, ID) = (playerID(getPlayerID(teamLeader)), target, ID) {
		targetdrop{}
	}
}

# Face towards enemy when leader dies
# Prevents funny behavior while changing active character
if playerID(getPlayerID(teamLeader)), alive {
	if pos x * facing > 0 {turn{}} # Face center of screen
} else {
	if facing = (playerID(getPlayerID(enemy, teamLeader)), facing) {turn{}}
}

# Force standby character to always stay outside visible area
posSet{x: const240p(-320) * facing / camerazoom; y: 0}

# Cool down
# Is instant when point character is not attacking and the enemy is not being hit
if map(_potstag_cooldown) > 0 {
	if (playerID(getPlayerID(teamLeader)), ctrl || playerID(getPlayerID(teamLeader)), movetype = H)
	&& ((enemynear, movetype != H && enemynear, dizzy = 0 && enemynear, dizzypoints > 0)
		|| (enemynear, stateno = enemynear, const(StateDownedGetHit_lyingDown)) || (enemynear, stateno = enemynear, const(StateDownedGetHit_gettingUp))) {
		mapset{map: "_potstag_cooldown"; value: 0}
	}
}

# Darken portrait if character is cooling down (lifebars must allow it)
if map(_potstag_cooldown) > 0 {palfx{time:1; mul: 128, 128, 128}}


#===============================================================================
# State Force AI Tag Out
#===============================================================================

[StateDef 56565615;
	type: U; moveType: I; physics: N;
	sprPriority: 1; ctrl: 0;
]

mapset{map: "_potstag_forcetagout"; value: 0}

if time = 0 {
	removeexplod{}
	if numtarget {
		if (target, incustomstate) && (target, ID) != (playerID(getPlayerID(teamLeader)), target, ID) {
			selfstate{value: target, const(StateAirGetHit_recoveringInAirNotFalling); redirectID: target, ID}
			targetdrop{}
		}
	}
	if pos y < 0 {
		changeanim{value: const(AnimJumpNeutral_upwards)}
	} else {
		velSet{x: 0; y: 0}
		tagout{stateno: 56565610}
	}
}

if pos y < 0 {veladd{y: const240p(0.5)}}

if (vel y > 0 && pos y > -vel y)
	&& anim != const(AnimJumpLanding) {
	posset{y: 0}
	velset{x: 0; y: 0}
	changeanim{value: const(AnimJumpLanding)}
}

if (const(AnimJumpLanding) && animtime = 0) || time >= 120 {
	velSet{x: 0; y: 0}
	tagout{stateno: 56565610}
}


#===============================================================================
# StateTagJumpingIn
#===============================================================================

[StateDef 56565620;
	type: A; moveType: I; physics: N;
	anim: const(AnimTagJumpingIn);
	sprPriority: 1; ctrl: 0;
]

mapset{map: "_iksys_tagSwitchCooldown"; value: const(TagSwitchCooldown)} # For compatibility. Not actually used

# The character cannot be hit until it has landed
notHitBy{value: SCA; time: 2}

if roundState != 2 {playerPush{value: 0}}

if time = 0 {

	# Face same way as team leader for win pose
	if roundstate != 2 && facing != (playerID(getPlayerID(teamLeader)), facing) {turn{}}

	# Set starting pos
	posSet{x: const240p(pos x * localScale - (backEdgeDist * localScale + 80) * facing); y: 0}

	# Change active player assignment if the battle still goes on
	if roundState = 2 {
		mapset{map: "_iksys_tagLastId"; value: playerID(getPlayerID(teamLeader)), ID}
		tagIn{leader: playerNo}
		call fTagSwitchExplod();
	}
	velSet{x: const240p(3.0); y: const240p(-10.0)}

	# Make win poses further apart
	if roundstate = 3 {
		velSet{x: const240p(8.0 - 0.75 * (playerno - teamside)); y: const240p(-10.0)}
	}

} else {
	veladd{y: const240p(0.5)}
	if vel y > 0 && pos y > -vel y {
		velSet{x: 0; y: 0}
		changeState{value: 56565621}
	}
}

# Bound to screen when falling
screenBound{value: (vel y > 0); moveCamera: 1, 0}

# Change to falling down anim if it exists
persistent(0) if vel y > const240p(-2) && anim = [41, 43] && selfAnimExist(anim + 3) {changeAnim{value: anim + 3}}


#===============================================================================
# StateTagLanding
#===============================================================================

[StateDef 56565621;
	type: S; moveType: I; physics: N;
	anim: const(AnimTagLanding);
	sprPriority: 1; ctrl: 1;
	velset: 0, 0;
]

if time = 0 {posSet{y: 0}}

if animTime >= 0 || time >= 10 {changeState{value: const(StateStand); ctrl: 1}}


#===============================================================================
# Global states (executed outside of pauses)
#===============================================================================

[StateDef -2]

if map(_iksys_tagActive) = 1 {

# Prevents Active Tag before round actually starts as roundstate 2 starts too early
if !map(_potstag_firstctrl) && ctrl {mapset{map: "_potstag_firstctrl"; value: 1}}

# Fix erratic camera during intros
if roundstate = [0, 1] && playerno != teamleader {screenbound{value: 0; movecamera: 0, 0}}

if roundState = 4 {
	mapset{map: "_iksys_tagActive"; value: 0}

# ALIVE players
} else if alive {

	# ACTIVE player
	if playerNo = teamLeader {

		# Tag switch cooldown. Not used but kept for compatibility
		# A character that wishes to disable tagging out can use this as a timer
		if map(_iksys_tagSwitchCooldown) > 0 {
			mapadd{map: "_iksys_tagSwitchCooldown"; value: -1}
		} else {

			# Logical order is crucial here
			# Check if the player is allowed to counter tag
			mapset{map: "_potstag_willcounter"; value: 0}

			if roundstate = 2
			&& !map(_potstag_lastchar)
			&& (playerID(getplayerID(teamside)), map(_potstag_taggauge)) >= (playerID(getplayerID(teamside)), map(_potstag_taggaugemax))
			&& (movetype = H || stateno = const(StateDownedGetHit_gettingUp) || dizzy || dizzypoints <= 0)
			&& gethitvar(attr) != const(AttrStandingHyperAttack)
			&& gethitvar(attr) != const(AttrCrouchingHyperAttack)
			&& gethitvar(attr) != const(AttrAerialHyperAttack)
			&& gethitvar(attr) != const(AttrStandingHyperThrow)
			&& gethitvar(attr) != const(AttrCrouchingHyperThrow)
			&& gethitvar(attr) != const(AttrAerialHyperThrow)
			&& gethitvar(attr) != const(AttrStandingHyperProjectile)
			&& gethitvar(attr) != const(AttrCrouchingHyperProjectile)
			&& gethitvar(attr) != const(AttrAerialHyperProjectile) {
				mapset{map: "_potstag_willcounter"; value: 1}
			}

			# Check if the player is allowed to active switch
			mapset{map: "_potstag_willswitch"; value: 0}

			if roundstate = 2
			&& movetype != H
			&& map(_potstag_firstctrl)
			&& !map(_potstag_lastchar)
			&& !map(_potstag_willcounter) {
				mapset{map: "_potstag_willswitch"; value: 1}
			}

			# Check if last active player has left the screen or died
			mapset{map: "_potstag_lastonebusy"; value: 0}

			if map(_iksys_tagLastID) && playerID(map(_iksys_tagLastID)), alive && playerID(map(_iksys_tagLastID)), stateNo != 56565611 {
					mapset{map: "_potstag_lastonebusy"; value: 1}
			}

			# Check if the player is allowed to active switch while partners are busy
			mapset{map: "_potstag_canbusyswitch"; value: 0}

			if roundstate = 2
			&& (map(_potstag_willswitch) || map(_potstag_willcounter))
			&& (playerID(getplayerID(teamside)), map(_potstag_taggauge)) >= (playerID(getplayerID(teamside)), map(_potstag_taggaugemax)) {
				mapset{map: "_potstag_canbusyswitch"; value: 1}
			}

			# Check if the player is allowed to manually tag
			mapset{map: "_potstag_playerallows"; value: 0}

			if roundstate = 2
			&& map(_potstag_firstctrl)
			&& (ctrl || map(_potstag_willswitch) || map(_potstag_willcounter))
			&& (map(_potstag_lastonebusy) = 0 || map(_potstag_canbusyswitch))
			&& stateno != 56565600
			&& stateno != 56565620
			&& stateno != 56565621 {
				mapset{map: "_potstag_playerallows"; value: 1}
			}

			# Get partner ID in case of tag command
			let partnerID = 0;
			let nextPartnerID = call fTagGetPartnerID(1);
			let previousPartnerID = call fTagGetPartnerID(-1);

			if map(_potstag_cmdnext) {
				let partnerID = $nextPartnerID;
			} else if map(_potstag_cmdprev) {
				let partnerID = $previousPartnerID;
			}

			# Check if the player will switch while partners are busy
			mapset{map: "_potstag_willbusyswitch"; value: 0}

			if map(_potstag_canbusyswitch) {
				if map(_potstag_lastonebusy) || (playerID($partnerID), map(_potstag_cooldown) > 0) {
					mapset{map: "_potstag_willbusyswitch"; value: 1}
				}
			}

			# Conditions for tagging are met
			if map(_potstag_playerallows) && $partnerID > 0
				&& (playerID($partnerID), stateNo = 56565611) {
					if ctrl = 0 {palfx{time: 12; add: 128, 128, 128; sinadd: -128, -128, -128, 4}}
					if map(_potstag_willbusyswitch) {
						mapset{map: "_potstag_canbusyswitch"; value: 0}
						mapset{map: "_potstag_taggauge"; value: 0; redirectID: getplayerID(teamside)}
						palfx{time: 12; add: -128, 128, -128; sinadd: 128, -128, 128, 4}
						mapset{map: "_potstag_invulnerable"; value: 0; redirectId: $partnerId}
					}
					if map(_potstag_willcounter) {
						mapset{map: "_potstag_willcounter"; value: 0}
						mapset{map: "_potstag_taggauge"; value: 0; redirectID: getplayerID(teamside)}
						redlifeset{value: 0}
						palfx{time: 24; add: 128, -128, -128; sinadd: -128, 128, 128, 4}
						mapset{map: "_potstag_invulnerable"; value: 1; redirectId: $partnerId}
					}
					if ctrl = 1 || map(_potstag_willcounter) {
						mapset{map: "_potstag_leavingdelay"; value: 0}
					} else {
						mapset{map: "_potstag_leavingdelay"; value: 1}
					}
					mapset{map: "_potstag_gotostandby"; value: 1}
					lifebarAction{text:"Tag  In!"}
					tagIn{stateNo: playerID($partnerID), 56565600; redirectId: $partnerId}
					mapset{map: "_potstag_cooldown"; value: 60}
					mapset{map: "_potstag_invulnerable"; value: (movetype = H); redirectId: $partnerId}
			}
		}

	# PARTNERS
	} else {

		# Exit if on screen, at the round start / during round
		if roundState = 2
			&& (ctrl || standby || map(_potstag_gotostandby) || map(_potstag_firstctrl) = 0)
			&& stateNo != [56565600, 56565615]
			&& ((stateno = const(StateStand) || stateno = const(StateStandToCrouch) || stateno = const(StateCrouching) || stateno = const(StateCrouchToStand) ||
				stateno = const(StateWalk) || stateno = const(StateJumpStart) || stateno = const(StateJumpLand) || stateno = const(StateRunForward) || stateno = const(StateHopBackwards_land) ||
				stateno = const(StateGuard_start) || stateno = const(StateStandGuard_guarding) || stateno = const(StateCrouchGuard_guarding) || stateno = const(StateAirGuard_guarding) || stateno = const(StateGuard_end))
			|| (AIlevel > 0 && (anim = const(AnimWalkingForwards) || anim = const(AnimWalkingBackwards) || anim = const(AnimJumpStart_onGround)))) { # Overrides AI walking scripts
				changestate{value: 56565610}
		}

		# Enter at the round end to perform the win pose
		if roundState = 3
			&& (enemynear, stateno != [(enemynear, const(StateStandGetHit_shaking)), (enemynear, const(StateDownedGetHit_knockedBack))]) {
				assertSpecial{flag: noInput}
				if stateNo = 56565611 {
					mapset{map: "_potstag_invulnerable"; value: 1}
					tagIn{stateNo: 56565620}
				}
		}

		# Win pose faces the same way as the leader
		if roundState = 3 {assertspecial{flag: noautoturn}}

		# Disable control and inputs when tagging out
		# Currently lacking a way to force the same on AI players
		ignorehitpause if map(_potstag_gotostandby) {
			ctrlset{value: 0}
			assertSpecial{flag: noturntarget}
			assertSpecial{flag: noInput; flag2: noHardcodedKeys}
			if Stateno = const(StateDownedGetHit_lyingDown) {
				changeState{value: const(StateDownedGetHit_gettingUp)}
			}
			if AIlevel > 0 {
				if !(hitdefattr = SCA, HA, HP, HT) && movecontact = 1 {movehitreset{}} # Motivates AI to stop most combos
			}
		}

		# Force Tag Out timer
		if standby && map(_potstag_forcetagout) != 0 {mapset{map: "_potstag_forcetagout"; value: 0}} # Reset timer

		if !standby && playerno != teamLeader && roundstate = 2 {mapadd{map: "_potstag_forcetagout"; value: 1}} # Increase timer

		# Force Tag Out in case the AI is too active
		# But not if it's getting hit, binding the opponent or in the middle of a super
		if AIlevel > 0 && !standby && stateno != 56565615 {
			if movetype != H
			&& dizzy = 0 && dizzypoints > 0 && guardbreak = 0
			&& cond(numtarget, (target, incustomstate = 0), 1)
			&& cond(numtarget, (target, gethitvar(isbound) = 0), 1)
			&& cond(numtarget, (target, gethitvar(attr) != [(target, const(AttrCrouchingHyperAttack)), (target, const(AttrAerialHyperProjectile))]), 1) {
				if map(_potstag_forcetagout) >= 180 {
					changestate{value: 56565615}
					mapset{map: "leavingdelay"; value: 1}
				}
				if time <= 1
				&& (prevstateno = [const(StateGuard_start), const(StateAirGuardHit_knockedAway)]
				|| prevstateno = [const(StateStandGetHit_shaking), const(StateAirGetHit_fallRecoveryInAir)]) {
					changestate{value: 56565615}
					mapset{map: "leavingdelay"; value: 0}
				}
			}
		}

		# Force Tag Out if Active Tag somehow hangs the game
		if playerno != teamLeader && roundstate = 2 && time >= 300 {
			if (movetype = I && dizzy = 0 && dizzypoints > 0)
			&& cond(numtarget, (target, gethitvar(isbound) = 0), 1)
			&& cond(numtarget, (target, incustomstate = 0), 1)
			&& ((abs(vel x) < 1 && abs(vel y) < 1) || backedgedist <= 0 || frontedgedist <= 0 || screenpos y < 0 || screenpos y > const240p(320))
			&& map(_potstag_forcetagout) >= 300
			&& stateno != 56565600
			&& stateno != 56565610
			&& stateno != 56565611
			&& stateno != 56565620
			&& stateno != 56565621 {
				changestate{value: 56565610}
			}
		}

		# Force Tag In
		# Backup measure to maybe prevent freezing the game
		if standby && map(_potstag_lastchar) {
			if stateno != 56565600
			&& stateno != 56565610
			&& stateno != 56565611
			&& stateno != 56565620
			&& stateno != 56565621 {
				tagin{}
			}
		}

	}

	# Track team leader facing only when they have control
	if playerID(getPlayerID(teamLeader)), ctrl
	&& playerID(getPlayerID(teamLeader)), map(_potstag_gottostandby) = 0 {
		mapset{map: "_potstag_facing"; value: playerID(getPlayerID(teamLeader)), facing}
	}

	# Red Life regeneration
	# 0.5% of lifemax every 30 frames by default
	if standby && redLife > 0 && (time % const(TagRedLifeRegenFrames)) = 0 {
		let regenVal = min(redLife, ceil(lifeMax * const(TagRedLifeRegenPercent)));
		lifeAdd{value: $regenVal; absolute: 1}
		redLifeAdd{value: -$regenVal; absolute: 1}
		}

	# Reset leaving delay if the character was caught in a combo
	if movetype = H {mapset{map: "_potstag_leavingdelay"; value: 0}}

	# Reset tag out variable
	if map(_potstag_gotostandby) && (standby || roundstate != 2) {mapset{map: "_potstag_gotostandby"; value: 0}}

# DEAD players
} else {

	# Death timer
	mapadd{map: "_potstag_deathtimer"; value: 1}

	# Disable camera so point character can go die outside the screen
	if playerNo = teamLeader && roundstate = 2
	&& (statetype = A || statetype = L)
	&& (backedgedist <= 0 || frontedgedist <= 0) {
		screenbound{value: 0; movecamera: 1, 0}
	}

	# KO slowdown
	if playerNo = teamLeader && roundstate = 2
	&& map(_potstag_deathtimer) = [1, 30] {
		pause{time: 1}
	}

	# Active player died and hit the ground
	# Tag in now happens after a fixed time
	if playerNo = teamLeader && map(_potstag_deathtimer) >= 120 {
		# Disable tag code checking
		mapset{map: "_iksys_tagActive"; value: 0}
		# Bring next team member
		let partnerID = call fTagGetPartnerID(1);
		if $partnerID > 0 {
			lifebarAction{text:"Tag  In!"}
			tagOut{}
			tagIn{stateNo: playerID($partnerID), 56565620; redirectId: $partnerId}
			mapset{map: "_potstag_invulnerable"; value: 1; redirectId: $partnerId}
		}
	}
}

}


#===============================================================================
# Global states (executed during pauses)
#===============================================================================

[StateDef -4]

if !const(Default.Enable.Tag) || isHelper || teamSide = 0 {
	# Do nothing
	}

# Initialize variables. Some were added, others were removed
else if roundState = 0 && teamMode = Tag {
	mapset{map: "_potstag_cooldown"; value: 0}
	mapset{map: "_potstag_firstctrl"; value: 0}
	mapset{map: "_potstag_leavingdelay"; value: 0}
	mapset{map: "_potstag_deathtimer"; value: 0}
	mapset{map: "_potstag_taggauge"; value: 0}
	mapset{map: "_potstag_taggaugemax"; value: (lifemax + cond(numpartner >= 1, partner(0), lifemax, 0) + cond(numpartner >= 2, partner(1), lifemax, 0) + cond(numpartner >= 3, partner(2), lifemax, 0)) / float(numpartner + 1)} # Maximum allowed
	mapset{map: "_potstag_facing"; value: ifelse(teamside = 2, -1, 1)}
	mapset{map: "_iksys_tagActive"; value: 1}
	mapset{map: "_iksys_tagLastId"; value: 0}
	mapset{map: "_iksys_tagSwitchCooldown"; value: 0}

	# Players 1 and 2 always start as the point characters
	if playerno = teamside {tagin{leader: playerno}}

	# Configure Tag Gauge position on screen
	# Default values are just meant to work in both the screenpacks included with Ikemen GO, in both aspect ratios
	mapset{map: "_potstag_cfg_gaugex"; value: -50} # X offset default: 89 / 110
	mapset{map: "_potstag_cfg_gaugey"; value: 64} # Y offset default: 41
	mapset{map: "_potstag_cfg_scale"; value: 0.2} # Scale default: 0.5
	}

# Players 1 and 2 handle the Tag Gauge
ignorehitpause if teamMode = Tag && playerno = teamside {

# Tag Gauge limits
ignorehitpause if map(_potstag_taggauge) < 0 {mapset{map: "_potstag_taggauge"; value: 0}} # Minimum
ignorehitpause if gamemode = "training" && enemynear, movetype != H {mapadd{map: "_potstag_taggauge"; value: 0.0334 * map(_potstag_taggaugemax)}} # Refill in Training mode
ignorehitpause if map(_potstag_taggauge) > map(_potstag_taggaugemax) {mapset{map: "_potstag_taggauge"; value: map(_potstag_taggaugemax)}} # Can't go over maximum

# Display Tag Gauge
# Uses debug font for compatibility purposes
ignorehitpause if roundstate = [1, 2] && (playerID(getPlayerID(teamLeader)), map(_potstag_lastchar) = 0) {

	# Shadow layer
	ignorehitpause if teamside = 1 {
		text{text: "X-TAG %d%%"; params: floor(100 * (playerID(getplayerID(teamside)), map(_potstag_taggauge)) / (playerID(getplayerID(teamside)), map(_potstag_taggaugemax))); removetime: 1; align: 1; pos: map(_potstag_cfg_gaugex) + 1, map(_potstag_cfg_gaugey) + 1; scale: map(_potstag_cfg_scale), map(_potstag_cfg_scale); color: 0, 0, 0}#color: 66, 8, 8}
	} else ignorehitpause {
		text{text: "%d%% X-TAG"; params: floor(100 * (playerID(getplayerID(teamside)), map(_potstag_taggauge)) / (playerID(getplayerID(teamside)), map(_potstag_taggaugemax))); removetime: 1; align: -1; pos: 321 - map(_potstag_cfg_gaugex), map(_potstag_cfg_gaugey) + 1; scale: map(_potstag_cfg_scale), map(_potstag_cfg_scale); color: 0, 0, 0}#color: 66, 8, 8}
	}

	# Main text
	ignorehitpause if teamside = 1 {
		text{text: "X-TAG %d%%"; params: floor(100 * (playerID(getplayerID(teamside)), map(_potstag_taggauge)) / (playerID(getplayerID(teamside)), map(_potstag_taggaugemax))); removetime: 1; align: 1; pos: map(_potstag_cfg_gaugex), map(_potstag_cfg_gaugey); scale: map(_potstag_cfg_scale), map(_potstag_cfg_scale)}#; color: 254,174,0}
	} else ignorehitpause {
		text{text: "%d%% X-TAG"; params: floor(100 * (playerID(getplayerID(teamside)), map(_potstag_taggauge)) / (playerID(getplayerID(teamside)), map(_potstag_taggaugemax))); removetime: 1; align: -1; pos: 320 - map(_potstag_cfg_gaugex), map(_potstag_cfg_gaugey); scale: map(_potstag_cfg_scale), map(_potstag_cfg_scale)}#; color: 254,174,0}
	}
}
}

ignorehitpause if map(_iksys_tagActive) = 1 {

# Reset tag input, but only if the characters are not paused or in hitpause
if pausetime = 0 && hitpausetime = 0 && enemynear, pausetime = 0 {
	if map(_potstag_cmdnext) > 0 {mapadd{map: "_potstag_cmdnext"; value: -1}}
	if map(_potstag_cmdprev) > 0 {mapadd{map: "_potstag_cmdprev"; value: -1}}
	}

# Buffer tag input in case input.pauseonhitpause is 0
ignorehitpause if playerNo = teamLeader && AIlevel = 0 {
	ignorehitpause if command = "TagShiftFwd" {mapset{map: "_potstag_cmdnext"; value: 5}}
	else ignorehitpause if command = "TagShiftBack" {mapset{map: "_potstag_cmdprev"; value: 5}}
}

# Fake the inputs for the AI
ignorehitpause if playerNo = teamLeader && AIlevel > 0 {
	let partnerID = 0;
	let nextPartnerID = call fTagGetPartnerID(1);
	let previousPartnerID = call fTagGetPartnerID(-1);

# AI tagging. Harder AI thinks faster
if AIlevel > 0 && random < (100 * (AIlevel ** 2 / 64.0)) {

	# Neutral Tag. Pick a character with more health left. More likely to pick next character than the previous one
	if ctrl
		&& !inguarddist
		&& (p2dist x > 200 || (enemynear, movetype = H && enemynear, hitfall) || enemynear, dizzy) {
				if (float(life) / lifemax) < (float(playerID($nextPartnerID), life - 200) / playerID($nextPartnerID), lifemax) && random < 666 {
					mapset{map: "_potstag_cmdnext"; value: 5}
				}
				if (float(life) / lifemax) < (float(playerID($previousPartnerID), life - 200) / playerID($previousPartnerID), lifemax) {
					mapset{map: "_potstag_cmdprev"; value: 5}
				}
	}

	# Active Tag. Pick a character with at least some health
	# Harder AI tags more often
	if random < (100 * (AIlevel ** 2 / 64.0))
		&& movetype = A
		&& !(hitdefattr = SCA, NA)
		&& (map(_potstag_lastonebusy) = 0 || power >= 1000)
		&& (enemynear, movetype = H || enemynear, inguarddist)
		&& (animtime < -10 || vel y < -5 || pos y < -50) {
				if playerID($nextPartnerID), life > 300 && random < 500 {
					mapset{map: "_potstag_cmdnext"; value: 5}
				}
				if playerID($previousPartnerID), life > 300 {
					mapset{map: "_potstag_cmdprev"; value: 5}
				}
	}

	# Counter Tag. If in bad shape
	if movetype = H && inguarddist && getHitVar(isbound) = 0 && p2bodydist x < 80 && life < 500 {
				if playerID($nextPartnerID), life > 300 && random < 666 {
					mapset{map: "_potstag_cmdnext"; value: 5}
				}
				if playerID($previousPartnerID), life > 300 {
					mapset{map: "_potstag_cmdprev"; value: 5}
				}
	}

	# Active tag in response to Counter Tag
	if random < (100 * (AIlevel ** 2 / 64.0))
		&& !ctrl
		&& enemynear(0), movetype = H
		&& enemynear(1), standby = 0
		&& (animtime < -10 || vel y < -5 || pos y < -50) {
				if playerID($nextPartnerID), life > 300 && random < 500 {
					mapset{map: "_potstag_cmdnext"; value: 5}
				}
				if playerID($previousPartnerID), life > 300 {
					mapset{map: "_potstag_cmdprev"; value: 5}
				}
	}
}
}

# Tag Gauge start
ignorehitpause if life >= lifemax {
	mapset{map: "_potstag_checklife"; value: lifemax}
}

# Tag Gauge filling
# Only for the active character
ignorehitpause if roundstate = 2 && playerno = teamLeader {
	if life < map(_potstag_checklife) {mapadd{map: "_potstag_taggauge"; value: map(_potstag_checklife) - life; redirectID: getplayerID(teamside)}}
	mapset{map: "_potstag_checklife"; value: life}
}

# Check if player is the last remaining character
# Last character has no need to display Tag text
if alive {
	mapset{map: "_potstag_lastchar"; value: 0}
	if cond(numpartner = 0, 1, 1) && cond(numpartner >= 1, partner(0), alive = 0, 1) && cond(numpartner >= 2, partner(1), alive = 0, 1) && cond(numpartner >= 3, partner(2), alive = 0, 1) {
			mapset{map: "_potstag_lastchar"; value: 1}
		}
}

}


# const(StateTagEnteringScreen) = 56565600
# const(StateTagLeavingScreen) = 56565610
# const(StateTagWaitingOutside) = 56565611
# const(StateTagJumpingIn) = 56565620
# const(StateTagLanding) = 56565621
# State Force AI Tag Out = 56565615
